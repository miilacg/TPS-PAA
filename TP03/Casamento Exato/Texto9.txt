Desenvolvimento do programa
Parte A
Arquivo "partea.h"
Nesse arquivo foi feita a definicao do "modoDebug", a implementacao das estruturas de dados utilizadas e o escopo das funcoes que foram implementadas. O "modoDebug" e uma variavel definida no inicio do programa e utilizada para configurar se o programa ira executar em modo de analise ou nao. Ela foi definido como 1 e sera comparada com a opcao escolhida pelo usuario. Caso as duas sejam iguais, o programa sera executado com o modo analise ativado e ira retornar para o usuario o numero total de chamadas recursivas (no caso da recursao e do memoization) que foram feitas para chegar no resultado, tempo total gasto, memoria utilizada para soma, entre outras informacoes. Alem disso, tambem sera apresentado a maior soma encontrada e a rota seguida - essa ultima parte tambem e informado quando o modoanalise nao esta ativo. As estruturas criadas e usadas no programa podem ser vistas no algoritmo 1 apresentado abaixo. A estrutura "Piramide" foi usada para guardar as informacoes sobre a piramide. Nela foram salvos os dados lidos no arquivo ("**espaco"), a altura que a piramide tem ("qtdLinhas") e uma matriz utilizada para mostrar a rota ("**caminhoPercorrido"). Tambem foi necessaria a criacao da estrutura "Analise" que tem as variaveis que usadas para guardar as informacoes  que  seriam  retornadas para os usuarios.
Arquivo "parte.c"
Funcao "piramideRecursiva();"
A funcao "piramideRecursiva();" e a responsavel por resolver o problema de forma recursiva. Ela faz uso de chamadas recursivas para fazer a soma dos numeros. Nessa funcao foram utilizadas as variaveis "baixo" e "direita" para auxiliar na resolucao do problema. Pela configuracao que a piramide era lida o movimento para esquerda foi feito para baixo, dessa forma a variavel "baixo" recebia o retorno da chamada recursiva para o numero logo abaixo do posicao que estava no momento e a variavel "direita" recebia o retorno da chamada para a posicao diagonalmente a direita. Depois disso era feita a comparacao entre as duas variaveis e retornado o valor da maior somado ao valor do numero que esta naquela posicao da piramide. A funcao salva o valor retornado em uma variavel auxiliar ("caminho[][]") para que a funcao "caminhoPercorrido();" possa utilizar. Logo abaixo esta o codigo que executa exatamente o que foi supracitado. 
Funcao "piramideMemoization();"
A funcao "piramideMemoization();" tambem foi desenvolvida para chegar no resultado usando recursao, mas ela analisa antes se o calculo ja foi feito para nao ter retrabalho. Para isso, foi utilizada a matriz "caminho[][]" que salva os valores ja calculados. A matriz e inicializada com 0, entao o programa verifica se o valor naquela posicao e 0, caso seja, a conta sera feita. Essa matriz tambem e utilizada na hora de informar a rota seguida. Com excecao a essa comparacao, a funcao "piramideMemoization();" funciona da mesma forma que a funcao "piramideRecursiva();" explicada anteriormente. O codigo 3 mostra a parte da implementacao que e diferente da "piramideRecursiva();"
Funcao "piramideIterativa();"
Essa funcao e utilizada para implementar a versao que resolve o problema "de tras pra frente", ou seja, ela comeca da base da piramide e vai subindo ate o topo dividindo o problema maior em problemas menores para tentar encontrar a solucao com um melhor desempenho. Alem de dividir o problema em pedacos menores, ela tambem utiliza uma tabela para controlar quais solucoes ela ja havia encontrado. Nessa funcao, diferente das outras, nao e utilizada recursividade,  elaresolve o problema de forma iterativa.  No inicio da funcao, a matriz auxiliar ('caminho[][]') recebe os valores da piramide original e ela e utilizada na resolucao do problema. Ao inves das variaveis 'baixo' e 'direita' receberem o retorno de uma chamada recursiva, elas recebem o valor de posicoes da matriz auxiliar e faz a comparacao entre eles. A matriz auxiliar entao recebe, na posicao indicada, o valor dela acrescido do maior valor encontrado atraves da comparacao entre 'baixo' e 'direita'. O codigo dessa funcao pode ser visto na implementacao.
Funcao 'solucao();'
Essa funcao tem como principal objetivo dar inicio a aplicacao, sendo assim responsavel por  inicializar as variaveis da analise, a matriz auxiliar 'caminho[][]' e chamar as funcoes que irao encontrar a soma e informar a rota de acordo com a implementacao que o usuario deseja. E nessa funcao que e feita a escolha de qual funcao de soma sera chamada de acordo com a escolha do usuario. Caso o usuario passe como opcao o numero "1" a funcao chamada e a recursiva, caso a opcao digitada for "2" a funcao memoization e chamada e se for "3" sera utilizada a funcao iterativa. Nessa funcao tambem e feita a comparacao entre o modo de operacao escolhido pelo usuario e o 'modoDebug' e a impressao do caminho percorrido. No codigo 5 pode ser visto parte dessa funcao.
Funcao 'geraPiramide();'
Tambem foi feita a implementacao de uma funcao extra que permiti ao usuario criar novas piramides. Essa funcao recebe como parametro o tamanho da piramide, um numero e um contador. O numero e utilizado para criar nomes diferentes para cada arquivo e o contador e utilizado para contar quantas piramides foram criadas e poder avisar ao usuario quando todas estiverem prontas. O tamanho e os numeros inseridos na piramide sao gerados aleatoriamente. Os tamanhos da piramide variam entre 1 e 100 e os valores contidos nela variam entre 0 e 100. Essa funcao e chamada pelo 'main.c' de acordo com o numero de piramides que o usuario desejou criar. Ela foi utilizada para criar as piramides utilizadas em alguns dos testes.
Funcao 'caminhoPercorrido();'
Nessa funcao e inicializada a matriz 'caminhoPercorrido[][]' com 0 em todas as posicoes. A mesma e utilizada na hora de informar a rota que foi seguida. Para descobrir o caminho percorrido foi feita a comparacao entre duas posicoes da matriz auxiliar 'caminho[][]', fornecida pelas funcoes de soma. O indice da posicao que tiver o maior valor nessa comparacao e utilizado para que a matriz 'caminhoPercorrido[][]', na posicao desse indice, receba 1. O codigo 6 mostra a implementacao dessa funcao.
Funcoes para testes automaticos.
Foram criadas 2 novas funcoes que sao capazes de realizar testes automaticamente recebendo do cliente apenas a quantidade de testes que ele deseja realizar. A funcao 'teste();' e a responsavel por dar inicio aos testes. Nela tem a implementacao de um for que executa a quantidade de vez que o cliente desejou fazer os testes. Dentro desse for, uma variavel recebe um numero aleatorio entre 1 e 39 para ser o tamanho da piramide (dessa forma, caso o usuario queria fazer esse tipo de teste, as piramides terao 39 como altura maxima), depois disso a  fuņcao que gera piramides e invocada. A seguir e utilizado ums printf para salvar o nome do arquivo criado na variavel 'nomeArquivo'. Dentro do for principal foi criado um novo for para chamar a funcao 'solucaoTeste();' uma vez para cada um dos modos implementado. essa funcao tem o mesmo principio de funcionamento da 'solucao();', mudando apenas o modo como as informacoes sao mostradas na tela. O retorno dos testes automatizados pode ser visto na figura 3. 
Outras funcoes
Foram criadas as funcoes 'alocaEspaco();', 'lerArquivo();', 'contaLinhas();', 'tempoInicial();' e 'tempoFinalizado()'. A funcao 'alocaEspaco();' e utilizada para alocar um espaco de memoria para a piramide de acordo com o que foi lido na arquivo usando a funcao 'lerArquivo();'. A funcao 'contaLinhas()', e necessaria para saber qual altura (quantidadede linhas) da piramide. Por ultimo, as funcoes 'tempoInicial();' e 'tempoFi-nalizado();’ sao utilizadas para saber qual o tempo utilizado para encontrara maior soma e para mostrar a rota seguida.
Arquivo 'main.c'
Nesse arquivo foram feitos os menus utilizados pelos usuarios. No primeiro menu, visto na figura 4, o usuario pode escolher entre "carregar um arquivo de dados", "criar piramides aleatorias", "fazer testes automaticos", "voltar" e "sair do programa". Caso o usuario escolha a primeira opcao, ele sera levado a um outro menu (figura 5) onde escolhera qual metodo ele deseja para encontrar a maior soma. Ao escolher o metodo, ele devera entrar com o nome do arquivo de onde sera feita a leitura da piramide. Nesse menu o usuario tambem tem as opcoes de sair do programa ou voltar para o menu anterior. Depois de escolher o metodo e inserir o nome do arquivo, o usuario escolhera se deseja ou nao ativar o 'modoDebug'. A opcao "2" permite ao usuario criar um ou mais arquivos de testes com piramides  de  tamanhos  e  valores  escolhidos  aleatoriamente. Na terceira opcao o usuario pode fazer testes automaticamente passando para o programa a quantidade de vezes que ele deseja realizar os mesmos. Por fim, a opcao "5" termina o programa. Quando o usuario escolhe a opcao de criar novas piramides ou a opcao de fazer testes automaticamente e informado que, caso ele ja tenha arquivos com os nomes dos arquivos que serao criados, ele perdera os arquivos. Em seguida, o programa confirma se o usuario quer prosseguir mesmo assim.